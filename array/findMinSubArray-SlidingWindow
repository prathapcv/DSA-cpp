#include <iostream>
#include <limits>
#include <vector>
using namespace std;
/*
Problem Statement:
Given an array of positive numbers and a positive number ‘S,’ find the length of the smallest 
contiguous subarray whose sum is greater than or equal to ‘S’. Return 0 if no such subarray 
exists.
*/
//Time complexity : O(n)
//Space complexity : O(1)

int findMinSubArray(int S, const vector<int>& arr) {
    int smallestWindow = INT_MAX;
    int windowSum = 0;
    int arrSize = arr.size();
    int windowStart = 0;
    for (int windowEnd = 0; windowEnd < arrSize; windowEnd++) {
        windowSum += arr[windowEnd];
        while (windowSum >= S) {
            smallestWindow = min(smallestWindow, windowEnd - windowStart + 1);
            windowSum -= arr[windowStart];
            windowStart++;
        }
    }
    cout << "fjdfkjdkfj" << endl;
    cout << smallestWindow << endl;
    return smallestWindow == INT_MAX ? 0 : smallestWindow;
}

int main() {
    vector<int> inputArray;
    inputArray.push_back(2);
    inputArray.push_back(1);
    inputArray.push_back(5);
    inputArray.push_back(2);
    inputArray.push_back(8);
    int result = findMinSubArray(7, inputArray);

    cout << result << " " << endl;
}


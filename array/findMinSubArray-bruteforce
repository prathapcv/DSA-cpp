#include <iostream>
#include <limits>
#include <vector>
using namespace std;

//Time complexity - O(n2)
//Space complexity - O(1)

int findMinSubArray(int S, const vector<int>& arr) {
    // TODO: Write your code here
    //Brute force approach
    int windowStart = 0;
    int smallestWindow = 0;
    int windowSize = 0;
    int windowSum = 0;
    int arrSize = arr.size();
    int nextWindowStart = 0;
    for (int windowStart = nextWindowStart; windowStart < arrSize; windowStart++) {
        windowSum += arr[windowStart];
        windowSize++;
        if (windowSum >= S) {
            if (smallestWindow == 0) {
              smallestWindow = windowSize;
            } else {
              smallestWindow = min(smallestWindow, windowSize);
            }
            nextWindowStart++;
            windowStart = nextWindowStart;
            windowSum = 0;
            windowSize = 0;
        }
    }
    return smallestWindow;
}

int main() {
    vector<int> inputArray;
    inputArray.push_back(2);
    inputArray.push_back(1);
    inputArray.push_back(5);
    inputArray.push_back(2);
    inputArray.push_back(3);
    inputArray.push_back(2);
    int result = findMinSubArray(7, inputArray);

    cout << result << " " << endl;
}

